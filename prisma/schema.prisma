generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @map("user_id")

    @@index([userId])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    username      String?     @unique
    bio           String?
    website       String?
    gender        String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime    @default(now()) @map(name: "created_at")
    updatedAt     DateTime    @updatedAt @map(name: "updated_at")
    posts         Post[]
    accounts      Account[]
    sessions      Session[]

    @@map(name: "users")
}


model Community {
id        Int      @id @default(autoincrement()) // Numeric primary key
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
}
model Post {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    title       String
    body        String
    imageUrl    String
    community   Community   @relation(fields: [communityId], references: [name])
    communityId String
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String      @map("user_id")

    @@index([userId])
    @@index([communityId])
}